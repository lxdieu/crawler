#!/usr/bin/env node

var request = require('request');
var cheerio = require('cheerio');
var chalk = require('chalk');
var program = require('commander');
var async = require('async');
var fs = require('fs');
var path = require('path');

var leaguesForFixture = {
    "NBA":"http://www.espn.co.uk/nba/schedule",
    "VBA": "https://hosted.wh.geniussports.com/VBA/en/competition/18125/schedule",
    "ABL": "http://aseanbasketballleague.com/game-schedules/"
};

var leaguesForTable = {
   "NBA": "http://www.espn.co.uk/nba/standings",
   "VBA": "https://vba.vn/bxh-thong-ke/"
};

var leaguesForScored = {
    "NBA": "http://www.espn.com/nba/scoreboard"
}
/* Lay lich thi dau NBA */
function crawlFixture(league) {
    var url = leaguesForFixture[league].toString();
    async.waterfall([
        function (callback) {
            request.get(url, callback);
        },
        function (response, body, callback) {
            if (response.statusCode !== 200) {
                return callback(new Error("Cannot access to: " + url));
            }
            return callback(null, body);
        },
        function (body, callback) {
            var $ = cheerio.load(body);
            var fixtures = [];
            $("#sched-container > div.responsive-table-wrap > table").each(function (index, table) {
                if($(table).closest('.responsive-table-wrap').prev().prop("tagName") == 'H2')
                {
                    var fixture = [];
                    $(table).find("tr").each(function (itr, tr) {
                        if (itr > 0) {
                            var row = {};
                            $(tr).find("td").each(function (itd, td) {
                                if (itd === 0) {
                                    row['player1'] = $(td).find("a > span").text();
                                    row['match'] = $(td).find("span > a").text();
                                    if(row['player1'] == '') row['player1'] = $(td).find("span > span").text();
                                } else if (itd === 1) {
                                    row['player2'] = $(td).find("a > span").text();
                                    if(row['player2'] == '') row['player2'] = $(td).find("span > span").text();
                                } else if (itd === 2) {
                                    row['time'] = null;
                                    if ($(td).attr("data-behavior") === "date_time") {
                                        var date = new Date($(td).attr("data-date"));
                                        row['time'] = date.toLocaleTimeString();
                                    }
                                }
                            });
                            fixture.push(row);
                        }
                    });
                    fixtures.push(fixture);
                }
            });
            return callback(null, $, fixtures);
        },
        function ($, fixtures, callback) {
            var times = [];
            var months = {
                "January": "01",
                "February": "02",
                "March": "03",
                "April": "04",
                "May": "05",
                "June": "06",
                "July": "07",
                "August": "08",
                "September": "09",
                "October": "10",
                "November": "11",
                "December": "12"
            };
            $("#sched-container > h2").each(function (index, h2) {
                var date = $(h2).text().replace(/,/g, '').split(' ');
                var month = months[date[1]];
                var day = date[2];
                times.push(day + "/" + month);
});
            var result = {};
            times.forEach(function (time, index) {
                result[time] = fixtures[index];
            });
            return callback(null, result);
        },
        function (result, callback) {
            var data = JSON.stringify(result, null, 4);
            var fileName = path.join(__dirname, '..', "fixture_" + league + ".json");
            fs.writeFile(fileName, data, {encoding: "utf8"}, callback);
        }
    ], function (error) {
        if (error) {
            console.log(chalk.red("Error: ") + error.message);
        } else {
            console.log(chalk.blue("Success!"));
        }
    });
}

/*Lay du lieu lich thi dau cho VBA*/
function crawlFixture2(league) {
    var url = leaguesForFixture[league].toString();
    async.waterfall([
        function (callback) {
            request.get(url, callback);
        },
        function (response, body, callback) {
            if (response.statusCode !== 200) {
                return callback(new Error("Cannot access to: " + url));
            }
            return callback(null, body);
        },
        function (body, callback) {
            var $ = cheerio.load(body);
            var fixtures = [];
            $(".fixture-wrap > div.match-wrap").each(function (index, div) {
                var months = {
                    "Jan": "01",
                    "Feb": "02",
                    "Mar": "03",
                    "Apr": "04",
                    "May": "05",
                    "Jun": "06",
                    "Jul": "07",
                    "Aug": "08",
                    "Sep": "09",
                    "Oct": "10",
                    "Nov": "11",
                    "Dec": "12"
                };
                var row = {};
                row['time'] = $(div).find('.match-time').first().find('span').text();
                var date = row['time'].replace(',','').split(' ');
                var month = months[date[0]];
                var day = date[1];
                var time = date[3].split(':');
                var h = time[0];
                var m = time[1];
/*
                console.log(typeof(m));
*/
                if(date[4] == "PM") h = parseInt(h) + 12;
                row['time'] = h + ':' + m;
                row['date'] = month + "/" + day + "/2017" ;
                row['datetime'] = row['time'] + ' ' + row['date'];
                row['team1'] = $(div).find('.home-team').find('.team-name > a').text().trim();
                row['score1'] = $(div).find('.home-team').find('.team-score > .fake-cell').text();
                row['score2'] = $(div).find('.away-team').find('.team-score > .fake-cell').text();
                row['team2'] = $(div).find('.away-team').find('.team-name > a').text();
                fixtures.push(row);
            });
            return callback(null, $, fixtures);
        },
        function ($, fixtures, callback) {
            var data = JSON.stringify(fixtures, null, 4);
            var fileName = path.join(__dirname, '..', "fixture_" + league + ".json");
            fs.writeFile(fileName, data, {encoding: "utf8"}, callback);
        }
    ], function (error) {
        if (error) {
            console.log(chalk.red("Error: ") + error.message);
        } else {
            console.log(chalk.blue("Success!"));
        }
    });
}

/*Lay du lieu lich thi dau cho ABL*/
function crawlFixtureABL(league) {
    var url = leaguesForFixture[league].toString();
    async.waterfall([
        function (callback) {
            request.get(url, callback);
        },
        function (response, body, callback) {
            if (response.statusCode !== 200) {
                return callback(new Error("Cannot access to: " + url));
            }
            return callback(null, body);
        },
        function (body, callback) {
            var $ = cheerio.load(body);
            var fixtures = [];
            $("#column-0022f5984ff4189b143defaa66acd446").find('table > tbody > tr').each(function (index, tr) {
                var date = $(tr).find('td').first().find('time').attr('datetime').slice(0,10).split('-');
                date = date['1']+"/"+date['2']+"/"+date['0'];
                var row = {};
                row['name1'] = $(tr).find('td').first().find('span').first().attr('title');
                row['logo1'] = $(tr).find('td').first().find('span').first().find('img').attr('src').replace("//","");
                row['name2'] = $(tr).find('td').first().find('span').eq(1).attr('title');
                row['logo2'] = $(tr).find('td').first().find('span').eq(1).find('img').attr('src').replace("//","");
                row['date'] = date;
                row['time'] = $(tr).find('td').first().find('time').attr('datetime').slice(11,19);
                row['datetime'] = $(tr).find('td').first().find('time').attr('datetime');
                fixtures.push(row);
            });
            return callback(null, $, fixtures);
        },
        function ($, fixtures, callback) {
            var data = JSON.stringify(fixtures, null, 4);
            var fileName = path.join(__dirname, '..', "fixture_" + league + ".json");
            fs.writeFile(fileName, data, {encoding: "utf8"}, callback);
        }
    ], function (error) {
        if (error) {
            console.log(chalk.red("Error: ") + error.message);
        } else {
            console.log(chalk.blue("Success!"));
        }
    });
}



/*Lay bang xep hang*/
function crawlTable(league) {
    var url = leaguesForTable[league].toString();
    async.waterfall([
        function (callback) {
            request.get(url, callback);
        },
        function (response, body, callback) {
            if (response.statusCode !== 200) {
                return callback(new Error("Cannot access to: " + url));
            }
            return callback(null, body);
        },
        function (body, callback) {
            var $ = cheerio.load(body);
            var table = [];
/*
            var selector = "#main-container > div > section > div > div > div.responsive-table-wrap > table > tbody > tr";
*/
            // tbody
            var selectorTbody = "#main-container > div > section > div > div > div.responsive-table-wrap > table > tbody";
            $(selectorTbody).each(function (itbody, tbody)  {
                var fixture = [];
/*
                var league_title = $(this).closest('.responsive-table-wrap').prev('h2').find('span.long-caption').text();
*/
                // loop tbody
                var selectorTr = $(tbody).find('tr');
                $(selectorTr).each(function (itr, tr) {
                    var row = {};
                    $(tr).find("td").each(function (itd, td) {
                        switch (itd) {
                            case 0:
                                row['order'] = $(td).find('span').first().text();
                                row['player'] = $(td).find('a > span > span').text();
                                break;
                            case 1:
                                row['w'] = $(td).text();
                                break;
                            case 2:
                                row['l'] = $(td).text();
                                break;
                            case 3:
                                row['pct'] = $(td).text();
                                break;
                            case 4:
                                row['gb'] = $(td).text();
                                break;
                            case 5:
                                row['home'] = $(td).text();
                                break;
                            case 6:
                                row['road'] = $(td).text();
                                break;
                            case 7:
                                row['div'] = $(td).text();
                                break;
                            case 8:
                                row['conf'] = $(td).text();
                                break;
                            case 9:
                                row['ppg'] = $(td).text();
                                break;
                            case 10:
                                row['opp-ppg'] = $(td).text();
                                break;
                            case 11:
                                row['diff'] = $(td).text();
                                break;
                            case 12:
                                row['strk'] = $(td).text();
                                break;
                            case 13:
                                row['l10'] = $(td).text();
                                break;
                        }
                    });
                    fixture.push(row);
                });
                table.push(fixture);
            });
            return callback(null, table);
        },
        function (result, callback) {
            var data = JSON.stringify(result, null, 4);
            var fileName = path.join(__dirname, '..', "table_" + league + ".json");
            fs.writeFile(fileName, data, {encoding: "utf8"}, callback);
        }
    ], function (error) {
        if (error) {
            console.log(chalk.red("Error: ") + error.message);
        } else {
            console.log(chalk.blue("Success!"));
        }
    });
}
/*Lay du lieu bxh cho VBA*/
function crawlTable2(league) {
    var url = leaguesForTable[league].toString();
    async.waterfall([
        function (callback) {
            request.get(url, callback);
        },
        function (response, body, callback) {
            if (response.statusCode !== 200) {
                return callback(new Error("Cannot access to: " + url));
            }
            return callback(null, body);
        },
        function (body, callback) {
            var $ = cheerio.load(body);
            var table = [];
            // tbody
            var selectorTr = ".sp-table-wrapper > table > tbody >tr";
            $(selectorTr).each(function (itr, tr) {
                    var row = {};
                    $(tr).find("td").each(function (itd, td) {
                        switch (itd) {
                            case 0:
                                row['order'] = $(td).text();
                                break;
                            case 1:
                                row['player'] = $(td).text();
                                break;
                            case 2:
                                row['w'] = $(td).text();
                                break;
                            case 3:
                                row['l'] = $(td).text();
                                break;
                            case 4:
                                row['pct'] = $(td).text();
                                break;
                        }
                    });
                    table.push(row);
            });
            return callback(null, table);
        },
        function (result, callback) {
            var data = JSON.stringify(result, null, 4);
            var fileName = path.join(__dirname, '..', "table_" + league + ".json");
            fs.writeFile(fileName, data, {encoding: "utf8"}, callback);
        }
    ], function (error) {
        if (error) {
            console.log(chalk.red("Error: ") + error.message);
        } else {
            console.log(chalk.blue("Success!"));
        }
    });
}

/* Lay du lieu tran dau cho NBA*/
function crawlMatchStats() {
        var url = 'http://www.nba.com/gametracker/#/20171108/MINGSW/warriors/analysis';
        async.waterfall([
            function (callback) {
                request.get(url, callback);
            },
            function (response, body, callback) {

                if (response.statusCode !== 200) {
                    return callback(new Error("Cannot access to: " + url));
                }
                return callback(null, body);
            },
            function (body, callback) {
                console.log(body);
                return 1;
                var $ = cheerio.load(body);
                return callback(null, table);
            },
            function (result, callback) {
                var data = JSON.stringify(result, null, 4);
                var fileName = path.join(__dirname, '..', "table_" + league + ".json");
                fs.writeFile(fileName, data, {encoding: "utf8"}, callback);
            }
        ], function (error) {
            if (error) {
                console.log(chalk.red("Error: ") + error.message);
            } else {
                console.log(chalk.blue("Success!"));
            }
        });
}


function showHelpForCrawlingFixture() {
    console.log("<league> should be:");
    console.log(chalk.blue('* NBA') + "\t\t=>\t" + chalk.yellow("NBA"));
    console.log(chalk.blue('* VBA') + "\t\t=>\t" + chalk.yellow("VBA"));
    console.log();
}
function showHelpForCrawlingTable() {
    console.log(chalk.blue('* NBA') + "\t=>\t" + chalk.yellow("NBA"));
    console.log(chalk.blue('* VBA') + "\t=>\t" + chalk.yellow("VBA"));
    console.log();
}

function showHelpForCrawlingScore() {
    console.log(chalk.blue('* NBA') + "\t=>\t" + chalk.yellow("NBA"));
    console.log();
}

program
    .command('fixtures <league>')
    .alias('f')
    .description('Crawler fixtures by league')
    .action(function (league) {
        if (!leaguesForFixture[league]) return showHelpForCrawlingFixture();
        else if(league == 'VBA') return crawlFixture2(league);
        else if(league == 'ABL') return crawlFixtureABL(league);
        return crawlFixture(league);
    })
    .on('--help', showHelpForCrawlingFixture);

program
    .command('tables <league>')
    .alias('t')
    .description('Crawler tables by league')
    .action(function (league) {
        if (!leaguesForTable[league]) {
            return showHelpForCrawlingTable();
        }
        if(league == 'VBA') return crawlTable2(league);
        return crawlTable(league);
    })
    .on('--help', showHelpForCrawlingTable);

program
    .command('scored <league>')
    .alias('s')
    .description('Crawler scored by league')
    .action(function (league) {
        if (!leaguesForScored[league]) {
            return showHelpForCrawlingScore();
        }
        return crawlScored(league);
    })
    .on('--help', showHelpForCrawlingScore);

program
    .command('match <>')
    .alias('m')
    .description('Crawler stats by match')
    .action(function () {
        if (!crawlMatchStats) {
            return showHelpForCrawlingScore();
        }
        return crawlMatchStats();
    })
    .on('--help', showHelpForCrawlingTable);

program.parse(process.argv);